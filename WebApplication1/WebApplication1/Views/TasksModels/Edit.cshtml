@model DeadLiner.Models.TaskViewModel

@{
    ViewBag.Title = "Edit";
    Layout = null;
}

@using (Html.BeginForm("Edit", "TasksModels", FormMethod.Post, new { id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <section class="manager">
        <div class="header  ">
            <h1>Edit Task</h1>
        </div>

        <div class="container-fluid eight">
            <div class="row">
                <div class="col-md-12">
                    <div class="content">
                        <div class=" col-md-12 empty">
                            <h3>Task Details</h3>
                        </div>
                        <div class="row user">
                            @Html.HiddenFor(model => model.TaskId)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.CreatedOn)
                            @Html.HiddenFor(model => model.Status)
                            <div class="col-md-12 form">
                                <p>Heading</p>
                                @Html.EditorFor(model => model.Heading, new { htmlAttributes = new { @class = "form-control", required = "The Heading field is required." } })
                                @Html.ValidationMessageFor(model => model.Heading, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-12 form">
                                <p>Content</p>
                                @Html.TextAreaFor(model => model.Content, new { @class = "form-control", required = "The Content field is required." })
                                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Users, new { @class = "control-label col-md-2" })
                                <div class="col-md-12" style="height: 120px; overflow-y: scroll;">
                                    @for (int i = 0; i < Model.Users.Count(); i++)
                                    {
                                        @Html.EditorFor(m => m.Users[i].Checked, new { htmlAttributes = new { @style = "margin-right: 5px;" } })
                                        @Html.DisplayFor(m => m.Users[i].Name)<br />

                                        @Html.HiddenFor(m => m.Users[i].Name)
                                        @Html.HiddenFor(m => m.Users[i].Id)
                                    }
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class='input-group date col-md-12' id='datetimepicker1' style="padding-left: 15px; padding-right: 15px;">
                                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control text-box single-line", required = "The StartDate field is required.", @readonly = "readonly" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class='input-group date col-md-12' id='datetimepicker2' style="padding-left: 15px; padding-right: 15px;">
                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control text-box single-line", required = "The EndDate field is required.", @readonly = "readonly" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 four">
                    <div class="col-md-12 btn">
                        <input type="submit" value="Edit" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script type="text/javascript">
    $(function () {
        $('#datetimepicker1').datetimepicker({
            ignoreReadonly: true,
            format: 'DD, MMMM, YYYY HH:mm',
            minDate: moment()
        }).on('dp.change',
            function (e) {
                $('#datetimepicker2').data("DateTimePicker").minDate(e.date)
            });

        $('#datetimepicker2').datetimepicker({
            ignoreReadonly: true,
            format: 'DD, MMMM, YYYY HH:mm',
        });
    });
    </script>
}
