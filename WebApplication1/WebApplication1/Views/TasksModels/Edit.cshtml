@model DeadLiner.Models.TaskViewModel

@{
    ViewBag.Title = "Edit";
    Layout = null;
}

@using (Html.BeginForm("Edit", "TasksModels", FormMethod.Post, new { id = "popupForm" }))
{
    @Html.AntiForgeryToken()

    <section class="manager">
        <div class="header  ">
            <h3>Edit Task</h3>
        </div>

        <div class="container-fluid eight">
            <div class="row">
                <div class="col-md-12">
                    <div class="content">
                        <div class=" col-md-12 empty">
                            <h3>Task Details</h3>
                        </div>
                        <div class="row user">
                            @Html.HiddenFor(model => model.TaskId)
                            @Html.HiddenFor(model => model.CreatedBy)
                            @Html.HiddenFor(model => model.CreatedOn)
                            @Html.HiddenFor(model => model.Status)
                            @Html.HiddenFor(model => model.StartDate)
                            <div class="col-md-12 form">
                                <p>Heading</p>
                                @Html.EditorFor(model => model.Heading, new { htmlAttributes = new { @class = "form-control", required = "The Heading field is required." } })
                                @Html.ValidationMessageFor(model => model.Heading, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-12 form">
                                <p>Content</p>
                                @Html.TextAreaFor(model => model.Content, new { @class = "form-control", required = "The Content field is required.", rows = 8 })
                                <input name="image" type="file" id="upload" class="hidden" onchange="" accept = ".jpg , .gif, .png, .jpeg" multiple>
                                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                            </div>                            
                            <div class="form-group">
                                @Html.LabelFor(model => model.Users, new { @class = "control-label col-md-2" })
                                <div class="col-md-12" style="height: 150px; overflow-y: auto;">
                                    @for (int i = 0; i < Model.Users.Count(); i++)
                                    {
                                        @Html.EditorFor(m => m.Users[i].Checked, new { htmlAttributes = new { @style = "margin-right: 5px;" } })
                                        @Html.DisplayFor(m => m.Users[i].Name)<br />

                                        @Html.HiddenFor(m => m.Users[i].Name)
                                        @Html.HiddenFor(m => m.Users[i].Id)
                                    }
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class='input-group date col-md-12' id='datetimepicker1' style="padding-left: 15px; padding-right: 15px;">
                                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control text-box single-line", required = "The StartDate field is required." } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class='input-group date col-md-12' id='datetimepicker2' style="padding-left: 15px; padding-right: 15px;">
                                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control text-box single-line", required = "The EndDate field is required." } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group four">
                                <div class="col-md-12 btn">
                                    <input type="submit" value="Edit" class="btn btn-default" />
                                    <img src="~/Content/images/logo.png" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<script type="text/javascript">
    $(function () {

        $('#datetimepicker1').datetimepicker({
            ignoreReadonly: true,
            format: 'DD MMMM YYYY HH:mm'
        }).on('dp.change',
            function (e) {
                $('#datetimepicker2').data("DateTimePicker").minDate(e.date);
            });
        //$('#datetimepicker1').data("DateTimePicker").disable();

        $('#datetimepicker2').datetimepicker({
            ignoreReadonly: true,
            format: 'DD, MMMM, YYYY HH:mm'
        });

        tinymce.EditorManager.editors = [];
        tinymce.init({
            selector: 'textarea',
            height: 300,
            mode: "textareas",
            theme: 'modern',
            plugins: [
                'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                'searchreplace wordcount visualblocks visualchars code fullscreen',
                'insertdatetime nonbreaking save table contextmenu directionality',
                'emoticons template paste textcolor colorpicker textpattern imagetools codesample toc'
            ],
            file_browser_callback: function (field_name, url, type, win) {
                if (type == 'image') $('#my_form input').click();
            },
            file_picker_callback: function(callback, value, meta) {
                if (meta.filetype == 'image') {
                    $('#upload').trigger('click');
                    $('#upload').on('change', function() {
                        var file = this.files[0];
                        var reader = new FileReader();
                        reader.onload = function(e) {
                            callback(e.target.result, {
                                alt: file.name
                            });
                        };
                        reader.readAsDataURL(file);
                    });
                }
            },
            toolbar1: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
            toolbar2: 'print preview | forecolor backcolor emoticons | codesample',
            image_advtab: true,
            paste_data_images: true,
            templates: [
                { title: 'Test template 1', content: 'Test 1' },
                { title: 'Test template 2', content: 'Test 2' }
            ]
        });
    });
</script>
