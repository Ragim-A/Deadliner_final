@model  DeadLiner.Models.TaskViewModel

@{
    ViewBag.Title = "Create";
}
<link href="~/Scripts/Uploadify/uploadify.css" rel="stylesheet" />
<script src="~/Scripts/Uploadify/jquery.uploadify.min.js"></script>
@*<script type="text/javascript">
    $(function () {            
        $('#upload').uploadify({         
            'swf': '/Scripts/Uploadify/uploadify.swf',
            'uploader': "@Url.Action("Upload", "TasksModels")",               
            'cancelImg': "@Url.Content("/Scripts/Uploadify/uploadify-cancel.png")",
            'fileSizeLimit': '1MB', // Add Kb, MB, GB
            'buttonText': 'Insert Images...', //Text for button
            'queueSizeLimit': 10, // Max number of files allowed
            'fileTypeDesc': 'Image Files',
            'fileTypeExts': '*.gif; *.jpg; *.png', // File type allowed
            'onUploadSuccess' : function(file, data, response) {
                tinyMCE.activeEditor.execCommand("mceInsertContent", true, "<img src='" + data + "' alt='Uploaded Image' class='img-responsive' />");
            }           
        })            
    })
</script>*@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <section class="manager">
        <div class="header alert alert-info">
            <h1 style="font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 20px;">Create Task!</h1> 
        </div>        
        <div class="container-fluid eight">
            <div class="row">
                <div class="col-md-12">
                    <div class="content">                        
                        <div class="row user">
                            <div class="col-md-12 form">
                                <p>Heading</p>
                                @Html.EditorFor(model => model.Heading, new { htmlAttributes = new { @class = "form-control", required = "The Heading field is required." } })
                                @Html.ValidationMessageFor(model => model.Heading, "", new { @class = "text-danger" })
                            </div>
                            @*<div class="form-group">
                                @Html.LabelFor(model => model.Image, new { @class = "col-lg-2 control-label" })
                                <div class="col-lg-9">
                                    <input type="file" name="Img" id="file_upload" />
                                </div>
                            </div>*@
                            <div class="col-md-12 form">
                                <p>Content</p>
                                @Html.TextAreaFor(model => model.Content, new { @class = "form-control",required = "The Content field is required.", @rows = 8 })
                                <input name="image" type="file" id="upload" class="hidden" onchange="" accept = ".jpg , .gif, .png, .jpeg">
                                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">                                
                                <label class="control-label col-md-2">Assign to Users</label>
                                <div class="col-md-12" style="height: 150px; overflow-y: auto;">
                                    @for (int i = 0; i < Model.Users.Count(); i++)
                                    {
                                        @Html.EditorFor(m => m.Users[i].Checked, new { htmlAttributes = new { @style = "margin-right: 5px;" } })
                                        @Html.DisplayFor(m => m.Users[i].Name)<br />

                                        @Html.HiddenFor(m => m.Users[i].Name)
                                        @Html.HiddenFor(m => m.Users[i].Id)
                                    }
                                </div>
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class='input-group date col-md-12' id='datetimepicker1' style="padding-left: 15px; padding-right: 15px;">
                                    <input class="form-control text-box single-line" data-val="true" data-val-date="The field StartDate must be a date." data-val-required="The StartDate field is required." id="StartDate" name="StartDate" type="text" value="" readonly>
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class='input-group date col-md-12' id='datetimepicker2' style="padding-left: 15px; padding-right: 15px;">
                                    <input type='text' class="form-control text-box single-line" data-val="true" data-val-date="The field EndDate must be a date." data-val-required="The EndDate field is required." id="EndDate" name="EndDate" value="" readonly />

                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                            </div>
                            
                            <div class="form-group four">
                                <div class="col-md-12 btn">
                                    <input type="submit" value="Create" class="btn btn-default" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>                
            </div>
        </div>
    </section>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@section scriptDateTimePicker
{
    <script type="text/javascript">
        $(function () {
            var checkBoxList = $(".check-box");

            for (var i = 0; i < checkBoxList.length; i++) {
                checkBoxList[i].checked = false;
            }

            $('#datetimepicker1').datetimepicker({
                ignoreReadonly: true,
                format: 'DD MMMM YYYY HH:mm',
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down"
                },
                minDate: moment()
            }).on('dp.change',
                function(e) {
                    $('#datetimepicker2').data("DateTimePicker").minDate(e.date)
                });

            $('#datetimepicker2').datetimepicker({
                ignoreReadonly: true,
                format: 'DD MMMM YYYY HH:mm',
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down"
                }
            });

            tinymce.init({
                selector: 'textarea',
                height: 300,
                theme: 'modern',                
                plugins: [
                    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                    'searchreplace wordcount visualblocks visualchars code fullscreen',
                    'insertdatetime nonbreaking save table contextmenu directionality',
                    'emoticons template paste textcolor colorpicker textpattern imagetools codesample toc'
                ],
                file_browser_callback: function (field_name, url, type, win) {
                    if (type == 'image') $('#my_form input').click();
                },
                file_picker_callback: function(callback, value, meta) {
                    if (meta.filetype == 'image') {
                        $('#upload').trigger('click');
                        $('#upload').on('change', function() {
                            var file = this.files[0];
                            var reader = new FileReader();
                            reader.onload = function(e) {
                                callback(e.target.result, {
                                    alt: file.name
                                });
                            };
                            reader.readAsDataURL(file);
                        });
                    }
                },
                toolbar1: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
                toolbar2: 'print preview | forecolor backcolor emoticons | codesample',
                image_advtab: true,
                paste_data_images: true,
                templates: [
                    { title: 'Test template 1', content: 'Test 1' },
                    { title: 'Test template 2', content: 'Test 2' }
                ],
                content_css: [
                    '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                    '//www.tinymce.com/css/codepen.min.css'
                ]
            });            

        });
    </script>
}
