@model IEnumerable<DeadLiner.Models.TasksModel>

@{
    ViewBag.Title = "My Tasks";
}
<div class="tablecontainer">
    <table class="table-bordered display responsive nowrap ui selectable celled table ui unstackable" id="myTable" cellspacing="0" width="100%">
        <thead>
        <tr>
            <th>
                No.s
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Heading)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedBy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedOn)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                Action
            </th>
        </tr>
        </thead>
    </table>
</div>
@section scripts
{
    <script>
        $(document).ready(function () {

            $.fn.dataTable.moment('DD/MM/YYYY');
            $.fn.dataTable.moment('dddd, DD/MM/YYYY');

            var oTable = $("#myTable").DataTable({            
                "ajax": {
                    "url": "/TasksModels/GetDataMyTasks",
                    "type": "get",
                    "datatype": "json"
                },
                "columnDefs": [
                    { "className": "dt-center", "targets": [6,7] }
                ],
                "order": [[3]],
                "columns": [
                    { "data": null },
                    { "data": "Heading", "autoWidth": true },
                    {
                        "data": "StartDate", "autoWidth": true,
                        "render": function (data, type, row) {
                            if (type === 'display' || type === 'filter') {
                                var rowvalueallday = row["EndDate"];
                                if (rowvalueallday == 0) {
                                    return (moment(data).format("ddd DD/MM/YYYY"));
                                } else {
                                    return (moment(data).format("MMMM Do YYYY, HH:mm"));
                                }
                            }
                            return data;
                        }
                    },
                    {
                        "data": "EndDate", "autoWidth": true,
                        "render": function (data, type, row) {
                            if (type === 'display' || type === 'filter') {
                                var rowvalueallday = row["EndDate"];
                                if (rowvalueallday == 0) {
                                    return (moment(data).format("ddd DD/MM/YYYY"));
                                } else {
                                    return (moment(data).format("MMMM Do YYYY, HH:mm"));
                                }
                            }
                            return data;
                        }
                    },
                    { "data": "CreatedBy", "autoWidth": true },
                    {
                        "data": "CreatedOn", "autoWidth": true,
                        "render": function (data, type, row) {
                            if (type === 'display' || type === 'filter') {
                                var rowvalueallday = row["EndDate"];
                                if (rowvalueallday == 0) {
                                    return (moment(data).format("ddd DD/MM/YYYY"));
                                } else {
                                    return (moment(data).format("MMMM Do YYYY, HH:mm"));
                                }
                            }
                            return data;
                        }
                    },
                    {
                        "data": "Status", "autoWidth": true,
                        "render": function (data) {
                            if (data == "Open") {
                                return '<i class="fa fa-unlock bat" aria-hidden="true" style="color:green;"></i>';
                            }
                            return '<i class="fa fa-lock bat" aria-hidden="true" style="color:red;"></i>';
                        }
                    },
                    {
                        "data": "TasksModelID", "width": "70px",
                        "render": function (data, type, row) {
                            if (row["Status"] == "Open") {
                                return '<a class="popup tor" href="/TasksModels/Details/' + data + '"><i class="fa fa-question-circle bat" style="padding-right:15px;" aria-hidden="true"></i></a>' +
                                    '<a class="popup" href="/TasksModels/ReplyToTask/' + data + '"><i class="fa fa-reply bat" aria-hidden="true" style="color:seagreen;"></i></a>';
                            }
                            return '<a class="popup tor" href="/TasksModels/Details/' + data + '"><i class="fa fa-info bat" aria-hidden="true"></i></a>'
                        }
                    }
                ]
            });
            setInterval(function () {
                $('#myTable').DataTable().ajax.reload(null, false);
            }, 120000);

            oTable.on('order.dt search.dt', function () {
                oTable.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

            $('.tablecontainer').on('click',
                'a.popup',
                function (e) {
                    e.preventDefault();
                    OpenPopup($(this).attr('href'));
                });

            function OpenPopup(pageUrl) {
                var $pageContent = $('<div/>');
                $pageContent.load(pageUrl, function () {
                    $('#popupForm', $pageContent).removeData('validator');
                    $('#popupForm', $pageContent).removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse('form');
                });

                $dialog = $('<div class="popupWindow" style="overflow:auto"></div>')
                    .html($pageContent)
                    .dialog({
                        draggable: true,
                        autoOpen: false,
                        resizable: true,
                        model: true,                        
                        height: 'auto',
                        width: 700,
                        position: {        
                            my: 'top', 
                            at: 'top'            
                        },
                        close: function () {
                            $dialog.dialog('destroy').remove();
                        }
                    })

                $('.popupWindow').on('submit', '#popupForm', function (e) {
                    var url = $('#popupForm')[0].action;
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: $('#popupForm').serialize(),
                        success: function (data) {
                            if (data.status) {
                                $dialog.dialog('close');
                                oTable.ajax.reload();
                            }
                        }
                    })
                    e.preventDefault();
                })
                $dialog.dialog('open');
            }
        });
    </script>
}